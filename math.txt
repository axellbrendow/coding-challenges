Logarithmic properties:
log xy = log x + log y.
log x/y = log x - log y.
log a^m = m log a.
log_b(a) = log_c(a) / log_c(b)

---

Proof of arithmetic progression sum formula
a: first element
d: common difference

S_n = (a + 0d) + (a + 1d) + (a + 2d) + ... + (a + (n - 2)d) + (a + (n - 1)d)
Note that first term + last term = second term + penultimate term

S_n = ( (a + 0d) + (a + (n - 1)d) ) * n / 2
S_n = (a_1 + a_n) * n / 2

OR

S_n = a * n + (0 + 1 + 2 + ... + (n - 2) + (n - 1)) * d
S_n = a * n + ((n - 1) * n / 2) * d
S_n = n * (a + (n - 1) / 2 * d)
(it's normal to get decimal numbers in the middle)

---

Proof of geometric progression sum formula
a: first element
r: ratio

Formula 1 -> S_n = (a * r^0) + (a * r^1) + (a * r^2) + (a * r^3) + ... + (a * r^(n - 2)) + (a * r^(n - 1))

Multiply by `r` both sides
Formula 2 -> S_n * r = (a * r^1) + (a * r^2) + (a * r^3) + (a * r^4) + ... + (a * r^(n - 2)) + (a * r^(n - 1)) + (a * r^(n - 0))

Subtract Formula 2 by Formula 1
S_n * r - S_n = a * r^(n - 0) - a * r^0
S_n (r - 1) = a * (r^n - 1)
S_n = a * (r^n - 1) / (r - 1)

---

Fibonacci sequence recurrence relation proof | big O time complexity

T(n) = T(n - 1) + T(n - 2)
T(2) = 1
T(1) = 1
T(0) = 0

Approach 1, just expand the terms and see the pattern:

T(n) = T(n - 1) + T(n - 2)

T(n - 1) and T(n - 2) are very close values, so we can simplify the equation:
T(n) = 2T(n - 1)

Now we expand T(n - 1):
T(n) = 2*2*T(n - 2)
T(n) = 2*2*2*T(n - 3)

Approach 2, math equation tricks:

T(n) = T(n - 1) + T(n - 2)

T(n - 1) and T(n - 2) are very close values, so we can simplify the equation:
T(n) = 2T(n - 1)

Now we create the equation of T(n - 1) and successors:
T(n - 1) = 2T(n - 2)
T(n - 2) = 2T(n - 3)
T(n - 3) = 2T(n - 4)
...
T(n - (n - 3)) = 2T(n - (n - 2))
T(n - (n - 2)) = 2T(n - (n - 1))
T(2) = 1
T(1) = 1
T(0) = 0

Now the multiplication of all equations on the left side should be equal to the multiplication of all
equations on the right side:

T(n) * T(n - 1) * ... * T(n - (n - 3)) * T(2) * T(1)  =  2T(n - 1) * 2T(n - 2) * ... * 2T(n - (n - 3)) * T(2) * T(1)

We can cut T(n - 1), T(n - 2) and many other calls to the T function. At the end, we'll have T(n) = 2^n
