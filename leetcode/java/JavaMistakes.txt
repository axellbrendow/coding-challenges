Bit shift operator does not move the sign bit, so -1 >> 1 is -1. You need to use
unsigned bit shift operator >>> to disconsider the sign bit

dividend | divisor
           -------
reminder   quotient

When the dividend is negative, the remainder is negative:
dividend % divisor = reminder
-7 % -2 = -1
When the dividend is positive, the remainder is positive:
7 % -2 = 1

Subtracting Integer.MIN_VALUE by another value (overflow)

Comparing Long or Integer with equal operator ==
These objects need to be compared with .equals() or Objects.equals()

not using .equals() to compare objects

Collectors.counting() returns Long and not Integer

This was not a mistake, I was curious about what happens if:
int[] arr = new int[3];
int i = 0;
arr[i] = i = 30;
That's valid, and doesn't produce ArrayIndexOutOfBoundsException. Java replaces the i before evaluation.
That's equivalent to: arr[i] = (i = 30)

If you run this code:
long a = Integer.MAX_VALUE + 1;
a ==> -2147483648

The correct way is to convert one of the values to long
long a = Integer.MAX_VALUE + 1L;
a ==> 2147483648

Using List.sort((a, b) -> a - b) when a and b are longs. In this scenario, you need to make comparisons rather
than additions or subtractions.
